// time taken for merging or moving elements from A and B to C is -- O( m+ n ) 
//there are ( log n ) passes to apply merge sort and we combine n elements in each passes , so them time complexity is   O ( n logn)
//merge is stable
//merge sort take extra space so space complexity -  S(n)
//
//merge sort vs insertions sort

..........................................................................................................................................
///here the time complexity is O( m + n) because here we simply copying the elements
//to apply the below code both the array must be sorted then we get a sigle sorted array otherwise not.

#include <iostream>
using namespace std;

void merge(int arr1[], int arr2[], int c[], int m, int n)
{

    int i = 0, j = 0, k = 0;

    while (i < m && j < n)
    {
        if (arr1[i] <= arr2[j])
        {
            c[k] = arr1[i];
            i++;
            k++;
        }
        else
        {
            c[k++] = arr2[j++];
        }
    }

    while (i < m)
    {
        c[k] = arr1[i];
        i++;
        k++;
    }

    while (j < n)
    {
        c[k] = arr2[j];
        j++;
        k++;
    }
}

int main()
{
    int arr1[5] = {2, 10, 18, 20, 23};
    int arr2[4] = {4, 9, 19, 25};
    int c[100];

    merge(arr1, arr2, c, 5, 4);

    cout << "Sorted array: ";
    for (int i = 0; i < 9; i++)
    {
        cout << c[i] << " ";
    }
    cout << endl;

    return 0;
}



// output
// Sorted array : 2 4 9 10 18 19 20 23 25






......................................................................................................................................................




#include <iostream>
using namespace std;

void merge(int arr[], int l, int mid, int h) {
    int n1 = mid - l + 1;
    int n2 = h - mid;

    int L[n1], R[n2];

    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergesort(int arr[], int l, int h) {
    if (l < h) {
        int mid = (l + h) / 2;
        mergesort(arr, l, mid);
        mergesort(arr, mid + 1, h);
        merge(arr, l, mid, h);
    }
}

int main() {
    int arr[] = {0, 9, 3, 7, 5, 6, 4, 8, 2};
    int n = sizeof(arr) / sizeof(arr[0]);

    mergesort(arr, 1, n - 1);

    cout << "Sorted array: ";
    for (int i = 1; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}
