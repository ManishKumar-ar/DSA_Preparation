#include <iostream>
#include <cmath>                        // we not use maths.h or maths
using namespace std;

float shortestpathdirection(char givenpath[])
{
    int x = 0, y = 0;
    for (int i = 0; givenpath[i] != '\0'; i++)
    {
        if (givenpath[i] == 'W')
            x--;                                       // here we use the post increment but here we can also use the pre-increment it would not effect our code.
        else if (givenpath[i] == 'E')
            x++;
        else if (givenpath[i] == 'N')
            y++;
        else if (givenpath[i] == 'S')
            y--;
    }

    int x2 = x * x;
    int y2 = y * y;

    return sqrt(x2 + y2);                      // directly we use the  function, without the library syntax
}

int main()
{
    char path[] = "WNEENESENNN";
    float result = shortestpathdirection(path);
    cout << result;

    return 0;
}



//output - 
/// 5



///const char* path = "WENS";


/// This declares a pointer to a constant character (const char*). It's commonly used to point to a string literal.
/// The string literal "WENS" is a constant array of characters, and the pointer path holds the address of the first character of this array.
/// The content of the string literal is immutable, and attempting to modify it through the pointer path would result in undefined behavior.
/// You can use functions that expect const char* or manipulate the pointer to navigate the characters in the string.



/// char path = "WENS";

/// This line of code is incorrect and would result in a compilation error because you are trying to assign a string literal to a single character (char).
/// If you intend to declare a character array, you should use char path[] = "WENS"; instead.
/// With char path[] = "WENS";, you create an array of characters and initialize it with the string "WENS". The array is modifiable, and you can change individual characters.




