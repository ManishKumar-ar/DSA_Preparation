// #include <iostream>
// using namespace std;

// int main()
// {
//     int profit[5] = {0, 1, 2, 5, 6};
//     int weight[5] = {0, 2, 3, 4, 5};
//     int m = 8, n = 4;
//     int k[5][9];  // Corrected array declaration

//     for (int i = 0; i <= n; i++)
//     {
//         for (int w = 0; w <= m; w++)
//         {
//             if (i == 0 || w == 0)
//                 k[i][w] = 0;
//             else if (weight[i] <= w)
//             {
//                 k[i][w] = max(profit[i] + k[i - 1][w - weight[i]], k[i - 1][w]);
//             }
//             else
//                 k[i][w] = k[i - 1][w];
//         }
//     }

//     cout << "The optimal solution is: " << k[n][m] << endl;

//     int i = n, j = m;
//     while (i > 0 && j > 0)
//     {
//         if (k[i][j] == k[i - 1][j])
//         {
//             cout << "Item " << i << " not selected (0)" << endl;
//             i--;
//         }
//         else
//         {
//             cout << "Item " << i << " selected (1)" << endl;

//             j = j - weight[i];
//             i--;
//         }
//     }

//     return 0;
// }

#include <iostream>
using namespace std;

int main()
{
    int profit[5] = {0, 1, 2, 5, 6};
    int weight[5] = {0, 2, 3, 4, 5};
    int m = 8, n = 4;
    int k[5][9];

    for (int i = 0; i <= n; i++)
    {
        for (int w = 0; w <= m; w++)
        {
            if (i == 0 || w == 0)
                k[i][w] = 0;
            else if (weight[i] <= w)
            {
                k[i][w] = max(profit[i] + k[i - 1][w - weight[i]], k[i - 1][w]);
            }
            else
                k[i][w] = k[i - 1][w];
        }
    }

    cout << "The optimal solution is: " << k[n][m] << endl;

    int i = 4, j = 8;
    while (i > 0 && j >= 0)
    {
        if (k[i][j] == k[i - 1][j])
        {
            cout << "Item " << i << " is not selected." << endl;
            i--;
        }
        else
        {
            cout << "Item " << i << " is selected." << endl;
            j = j - weight[i];
            i--;
        }
    }
}

//output 
The optimal solution is: 8
Item 4 is selected.
Item 3 is not selected.
Item 2 is selected.
Item 1 is not selected.





The line k[i][w] = max(profit[i] + k[i - 1][w - weight[i]], k[i - 1][w]); is a crucial part of the dynamic programming algorithm for solving the 0/1 knapsack problem.
Let's break down its purpose:

k[i][w] represents the maximum profit that can be obtained with the first i items (considered so far) and a knapsack capacity of w.
The decision is made based on two possibilities:

Include the current item (profit[i] + k[i - 1][w - weight[i]]):

If the weight of the current item (weight[i]) is less than or equal to the remaining capacity (w), it means that the current item can be included in the knapsack.
profit[i] is the profit of the current item, and k[i - 1][w - weight[i]] is the maximum profit obtained with the remaining capacity after including the current item. 
This is because we need to consider the best solution without the current item's weight.
Exclude the current item (k[i - 1][w]):

If including the current item exceeds the remaining capacity, we exclude the current item and take the maximum profit obtained without it.

